version: "3.8"

services:
  # PostgreSQL with pgvector
  postgres:
    image: ankane/pgvector:latest
    container_name: aelus-postgres
    environment:
      POSTGRES_USER: aelus
      POSTGRES_PASSWORD: aelus_password
      POSTGRES_DB: aelus_aether
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aelus"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and caching
  redis:
    image: redis:7-alpine
    container_name: aelus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI application (optional - for production)
  # api:
  #   build: .
  #   container_name: aelus-api
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://aelus:aelus_password@postgres:5432/aelus_aether
  #     - REDIS_URL=redis://redis:6379/0
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - .:/app
  #   command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery worker (Phase 2)
  # worker:
  #   build: .
  #   container_name: aelus-worker
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://aelus:aelus_password@postgres:5432/aelus_aether
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - .:/app
  #   command: celery -A app.workers.celery_app worker --loglevel=info

volumes:
  postgres_data:
  redis_data:
